[["/home/project/src/App.tsx","import React, { useState, useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { Users, PlusCircle, DollarSign, Menu, Trash2, UserCog, CreditCard } from 'lucide-react';\nimport GroupList from './components/GroupList';\nimport CreateGroup from './components/CreateGroup';\nimport AddExpense from './components/AddExpense';\nimport EmptyState from './components/EmptyState';\nimport GroupManagement from './components/GroupManagement';\nimport SettlePayment from './components/SettlePayment';\nimport ConnectWallet from './components/ConnectWallet';\nimport { Group, Expense } from './types';\n\n// Import Solana wallet adapter styles\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\nfunction App() {\n  const [groups, setGroups] = useState<Group[]>([]);\n  const [selectedGroup, setSelectedGroup] = useState<Group | null>(null);\n  const [showCreateGroup, setShowCreateGroup] = useState(false);\n  const [showAddExpense, setShowAddExpense] = useState(false);\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [showGroupManagement, setShowGroupManagement] = useState(false);\n  const [showSettlePayment, setShowSettlePayment] = useState(false);\n\n  // You can add Solana mainnet-beta here\n  const network = WalletAdapterNetwork.Devnet;\n\n  // You can add more wallet adapters here\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n    ],\n    [network]\n  );\n\n  const handleCreateGroup = (newGroup: Group) => {\n    setGroups([...groups, newGroup]);\n    setShowCreateGroup(false);\n  };\n\n  const handleAddExpense = (expense: Expense) => {\n    if (selectedGroup) {\n      const updatedGroup = {\n        ...selectedGroup,\n        expenses: [...selectedGroup.expenses, expense],\n      };\n      setGroups(groups.map(g => g.id === selectedGroup.id ? updatedGroup : g));\n      setSelectedGroup(updatedGroup);\n      setShowAddExpense(false);\n    }\n  };\n\n  const handleUpdateGroup = (updatedGroup: Group) => {\n    setGroups(groups.map(g => g.id === updatedGroup.id ? updatedGroup : g));\n    setSelectedGroup(updatedGroup);\n    setShowGroupManagement(false);\n  };\n\n  const handleDeleteGroup = () => {\n    if (selectedGroup) {\n      setGroups(groups.filter(g => g.id !== selectedGroup.id));\n      setSelectedGroup(null);\n    }\n  };\n\n  return (\n    <ConnectionProvider endpoint=\"https://api.devnet.solana.com\">\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <div className=\"min-h-screen bg-gray-900 text-gray-100 flex flex-col\">\n            <header className=\"bg-gray-800 text-gray-100 p-4 shadow-lg\">\n              <div className=\"container mx-auto flex justify-between items-center\">\n                <div className=\"flex items-center\">\n                  {groups.length > 0 && (\n                    <button\n                      onClick={() => setShowSidebar(!showSidebar)}\n                      className=\"mr-4 lg:hidden\"\n                    >\n                      <Menu size={24} />\n                    </button>\n                  )}\n                  <h1 className=\"text-2xl font-bold\">Solana Splitwise</h1>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <ConnectWallet />\n                  <button\n                    onClick={() => setShowCreateGroup(true)}\n                    className=\"bg-purple-600 text-gray-100 px-4 py-2 rounded-full font-semibold hover:bg-purple-700 transition duration-300 flex items-center\"\n                  >\n                    <PlusCircle size={20} className=\"mr-2\" />\n                    New Group\n                  </button>\n                </div>\n              </div>\n            </header>\n            <main className=\"flex-grow flex\">\n              {groups.length > 0 && (\n                <aside className={`w-64 bg-gray-800 p-4 border-r border-gray-700 transform ${showSidebar ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0 transition-transform duration-300 ease-in-out fixed lg:static h-full z-30 overflow-y-auto`}>\n                  <div className=\"flex justify-between items-center mb-6\">\n                    <h2 className=\"text-xl font-semibold text-gray-100\">Groups</h2>\n                  </div>\n                  <GroupList groups={groups} onSelectGroup={(group) => { setSelectedGroup(group); setShowSidebar(false); }} />\n                </aside>\n              )}\n              <section className={`flex-grow p-6 ${groups.length > 0 ? 'lg:ml-64' : ''}`}>\n                {groups.length === 0 ? (\n                  <EmptyState onCreateGroup={() => setShowCreateGroup(true)} />\n                ) : selectedGroup ? (\n                  <div className=\"bg-gray-800 rounded-lg shadow-md p-6\">\n                    <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\n                      <h2 className=\"text-3xl font-bold text-gray-100 mb-4 md:mb-0\">{selectedGroup.name}</h2>\n                      <div className=\"flex flex-wrap gap-2\">\n                        <button\n                          onClick={() => setShowAddExpense(true)}\n                          className=\"bg-green-600 text-gray-100 px-4 py-2 rounded-full font-semibold hover:bg-green-700 transition duration-300 flex items-center\"\n                        >\n                          <DollarSign size={20} className=\"mr-2\" />\n                          Add Expense\n                        </button>\n                        <button\n                          onClick={() => setShowGroupManagement(true)}\n                          className=\"bg-blue-600 text-gray-100 px-4 py-2 rounded-full font-semibold hover:bg-blue-700 transition duration-300 flex items-center\"\n                        >\n                          <UserCog size={20} className=\"mr-2\" />\n                          Manage Group\n                        </button>\n                        <button\n                          onClick={() => setShowSettlePayment(true)}\n                          className=\"bg-yellow-600 text-gray-100 px-4 py-2 rounded-full font-semibold hover:bg-yellow-700 transition duration-300 flex items-center\"\n                        >\n                          <CreditCard size={20} className=\"mr-2\" />\n                          Settle Payment\n                        </button>\n                        <button\n                          onClick={handleDeleteGroup}\n                          className=\"bg-red-600 text-gray-100 px-4 py-2 rounded-full font-semibold hover:bg-red-700 transition duration-300 flex items-center\"\n                        >\n                          <Trash2 size={20} className=\"mr-2\" />\n                          Delete Group\n                        </button>\n                      </div>\n                    </div>\n                    <div className=\"mb-8\">\n                      <h3 className=\"text-xl font-semibold mb-4 text-gray-300\">Members</h3>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {selectedGroup.members.map((member, index) => (\n                          <span key={index} className=\"bg-gray-700 text-gray-100 px-3 py-1 rounded-full text-sm font-medium\">\n                            {member}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-semibold mb-4 text-gray-300\">Expenses</h3>\n                      {selectedGroup.expenses.length > 0 ? (\n                        <ul className=\"space-y-4\">\n                          {selectedGroup.expenses.map((expense, index) => (\n                            <li key={index} className=\"bg-gray-700 p-4 rounded-lg shadow\">\n                              <div className=\"flex justify-between items-center\">\n                                <span className=\"font-medium text-gray-100\">{expense.description}</span>\n                                <span className=\"font-semibold text-green-400\">${expense.amount.toFixed(2)}</span>\n                              </div>\n                              <div className=\"text-sm text-gray-400 mt-1\">\n                                Paid by: {expense.paidBy}\n                              </div>\n                            </li>\n                          ))}\n                        </ul>\n                      ) : (\n                        <p className=\"text-gray-500 italic\">No expenses yet.</p>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <p className=\"text-xl text-gray-500\">Select a group or create a new one to get started</p>\n                  </div>\n                )}\n              </section>\n            </main>\n            {showCreateGroup && (\n              <CreateGroup onClose={() => setShowCreateGroup(false)} onCreateGroup={handleCreateGroup} />\n            )}\n            {showAddExpense && selectedGroup && (\n              <AddExpense\n                group={selectedGroup}\n                onClose={() => setShowAddExpense(false)}\n                onAddExpense={handleAddExpense}\n              />\n            )}\n            {showGroupManagement && selectedGroup && (\n              <GroupManagement\n                group={selectedGroup}\n                onClose={() => setShowGroupManagement(false)}\n                onUpdateGroup={handleUpdateGroup}\n              />\n            )}\n            {showSettlePayment && selectedGroup && (\n              <SettlePayment\n                group={selectedGroup}\n                onClose={() => setShowSettlePayment(false)}\n                onSettlePayment={(from, to, amount) => {\n                  console.log(`Settle payment: ${from} pays ${to} $${amount}`);\n                  setShowSettlePayment(false);\n                }}\n              />\n            )}\n          </div>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport default App;"]]